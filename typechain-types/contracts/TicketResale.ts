/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TicketResale {
  export type ResaleListingStruct = {
    listingId: BigNumberish;
    eventContract: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    price: BigNumberish;
    timestamp: BigNumberish;
    isActive: boolean;
    metadataURI: string;
  };

  export type ResaleListingStructOutput = [
    listingId: bigint,
    eventContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint,
    timestamp: bigint,
    isActive: boolean,
    metadataURI: string
  ] & {
    listingId: bigint;
    eventContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
    timestamp: bigint;
    isActive: boolean;
    metadataURI: string;
  };
}

export interface TicketResaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyResaleTicket"
      | "cancelResaleListing"
      | "emergencyReturnTicket"
      | "emergencyWithdraw"
      | "eventTokenToListingId"
      | "getContractBalance"
      | "getListing"
      | "getResaleListings"
      | "getTotalListings"
      | "isTicketListed"
      | "listTicketForResale"
      | "listingFee"
      | "listings"
      | "onERC721Received"
      | "owner"
      | "platformFee"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateListingFee"
      | "updatePlatformFee"
      | "userListings"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeUpdated"
      | "ListingCancelled"
      | "OwnershipTransferred"
      | "TicketListed"
      | "TicketSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyResaleTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelResaleListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyReturnTicket",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventTokenToListingId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResaleListings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTicketListed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listTicketForResale",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buyResaleTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelResaleListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyReturnTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventTokenToListingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResaleListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTicketListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listTicketForResale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    eventContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    listingId: BigNumberish
  ];
  export type OutputTuple = [
    eventContract: string,
    tokenId: bigint,
    seller: string,
    listingId: bigint
  ];
  export interface OutputObject {
    eventContract: string;
    tokenId: bigint;
    seller: string;
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketListedEvent {
  export type InputTuple = [
    eventContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish,
    listingId: BigNumberish
  ];
  export type OutputTuple = [
    eventContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint,
    listingId: bigint
  ];
  export interface OutputObject {
    eventContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketSoldEvent {
  export type InputTuple = [
    eventContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish,
    listingId: BigNumberish
  ];
  export type OutputTuple = [
    eventContract: string,
    tokenId: bigint,
    seller: string,
    buyer: string,
    price: bigint,
    listingId: bigint
  ];
  export interface OutputObject {
    eventContract: string;
    tokenId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TicketResale extends BaseContract {
  connect(runner?: ContractRunner | null): TicketResale;
  waitForDeployment(): Promise<this>;

  interface: TicketResaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyResaleTicket: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "payable"
  >;

  cancelResaleListing: TypedContractMethod<
    [listingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyReturnTicket: TypedContractMethod<
    [eventContract: AddressLike, tokenId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  eventTokenToListingId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getListing: TypedContractMethod<
    [listingId: BigNumberish],
    [TicketResale.ResaleListingStructOutput],
    "view"
  >;

  getResaleListings: TypedContractMethod<
    [eventContract: AddressLike],
    [bigint[]],
    "view"
  >;

  getTotalListings: TypedContractMethod<[], [bigint], "view">;

  isTicketListed: TypedContractMethod<
    [eventContract: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  listTicketForResale: TypedContractMethod<
    [eventContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  listingFee: TypedContractMethod<[], [bigint], "view">;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, bigint, boolean, string] & {
        listingId: bigint;
        eventContract: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
        timestamp: bigint;
        isActive: boolean;
        metadataURI: string;
      }
    ],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateListingFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  userListings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyResaleTicket"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelResaleListing"
  ): TypedContractMethod<[listingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyReturnTicket"
  ): TypedContractMethod<
    [eventContract: AddressLike, tokenId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eventTokenToListingId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [listingId: BigNumberish],
    [TicketResale.ResaleListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResaleListings"
  ): TypedContractMethod<[eventContract: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalListings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTicketListed"
  ): TypedContractMethod<
    [eventContract: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "listTicketForResale"
  ): TypedContractMethod<
    [eventContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, bigint, boolean, string] & {
        listingId: bigint;
        eventContract: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
        timestamp: bigint;
        isActive: boolean;
        metadataURI: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateListingFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userListings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TicketListed"
  ): TypedContractEvent<
    TicketListedEvent.InputTuple,
    TicketListedEvent.OutputTuple,
    TicketListedEvent.OutputObject
  >;
  getEvent(
    key: "TicketSold"
  ): TypedContractEvent<
    TicketSoldEvent.InputTuple,
    TicketSoldEvent.OutputTuple,
    TicketSoldEvent.OutputObject
  >;

  filters: {
    "FeeUpdated(uint256,uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "ListingCancelled(address,uint256,address,uint256)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TicketListed(address,uint256,address,uint256,uint256)": TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;
    TicketListed: TypedContractEvent<
      TicketListedEvent.InputTuple,
      TicketListedEvent.OutputTuple,
      TicketListedEvent.OutputObject
    >;

    "TicketSold(address,uint256,address,address,uint256,uint256)": TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;
    TicketSold: TypedContractEvent<
      TicketSoldEvent.InputTuple,
      TicketSoldEvent.OutputTuple,
      TicketSoldEvent.OutputObject
    >;
  };
}
