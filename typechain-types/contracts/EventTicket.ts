/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EventTicket {
  export type TicketStruct = {
    tokenId: BigNumberish;
    seatNumber: BigNumberish;
    tier: string;
    metadataURI: string;
    owner: AddressLike;
    exists: boolean;
  };

  export type TicketStructOutput = [
    tokenId: bigint,
    seatNumber: bigint,
    tier: string,
    metadataURI: string,
    owner: string,
    exists: boolean
  ] & {
    tokenId: bigint;
    seatNumber: bigint;
    tier: string;
    metadataURI: string;
    owner: string;
    exists: boolean;
  };

  export type TierStruct = {
    name: string;
    price: BigNumberish;
    quantity: BigNumberish;
    minted: BigNumberish;
    exists: boolean;
  };

  export type TierStructOutput = [
    name: string,
    price: bigint,
    quantity: bigint,
    minted: bigint,
    exists: boolean
  ] & {
    name: string;
    price: bigint;
    quantity: bigint;
    minted: bigint;
    exists: boolean;
  };
}

export interface EventTicketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "buyTicket"
      | "eventDate"
      | "eventDescription"
      | "eventName"
      | "eventOrganizer"
      | "getAllTierNames"
      | "getApproved"
      | "getAvailableSeats"
      | "getSeatNumber"
      | "getTicket"
      | "getTicketTier"
      | "getTier"
      | "getTotalMinted"
      | "getUserTickets"
      | "isApprovedForAll"
      | "isSeatOccupied"
      | "maxOccupancy"
      | "mintTicket"
      | "name"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "seatOccupied"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tickets"
      | "tierNames"
      | "tiers"
      | "tokenIdToSeatNumber"
      | "tokenIdToTier"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "userTickets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "OwnershipTransferred"
      | "TicketMinted"
      | "TicketPurchased"
      | "TierAdded"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "eventDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eventName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventOrganizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTierNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableSeats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTickets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSeatOccupied",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxOccupancy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTicket",
    values: [AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seatOccupied",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tierNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tiers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenIdToSeatNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTickets",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventOrganizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTierNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableSeats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSeatOccupied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOccupancy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTicket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seatOccupied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tierNames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToSeatNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTickets",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    to: AddressLike,
    seatNumber: BigNumberish,
    tier: string,
    metadataURI: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    to: string,
    seatNumber: bigint,
    tier: string,
    metadataURI: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    to: string;
    seatNumber: bigint;
    tier: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    tokenId: BigNumberish,
    tier: string,
    price: BigNumberish,
    seatNumber: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    tokenId: bigint,
    tier: string,
    price: bigint,
    seatNumber: bigint
  ];
  export interface OutputObject {
    buyer: string;
    tokenId: bigint;
    tier: string;
    price: bigint;
    seatNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TierAddedEvent {
  export type InputTuple = [
    tierName: string,
    tierPrice: BigNumberish,
    tierQuantity: BigNumberish
  ];
  export type OutputTuple = [
    tierName: string,
    tierPrice: bigint,
    tierQuantity: bigint
  ];
  export interface OutputObject {
    tierName: string;
    tierPrice: bigint;
    tierQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventTicket extends BaseContract {
  connect(runner?: ContractRunner | null): EventTicket;
  waitForDeployment(): Promise<this>;

  interface: EventTicketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  buyTicket: TypedContractMethod<
    [tierName: string, metadataURI: string],
    [bigint],
    "payable"
  >;

  eventDate: TypedContractMethod<[], [bigint], "view">;

  eventDescription: TypedContractMethod<[], [string], "view">;

  eventName: TypedContractMethod<[], [string], "view">;

  eventOrganizer: TypedContractMethod<[], [string], "view">;

  getAllTierNames: TypedContractMethod<[], [string[]], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getAvailableSeats: TypedContractMethod<[], [bigint], "view">;

  getSeatNumber: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  getTicket: TypedContractMethod<
    [tokenId: BigNumberish],
    [EventTicket.TicketStructOutput],
    "view"
  >;

  getTicketTier: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getTier: TypedContractMethod<
    [tierName: string],
    [EventTicket.TierStructOutput],
    "view"
  >;

  getTotalMinted: TypedContractMethod<[], [bigint], "view">;

  getUserTickets: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isSeatOccupied: TypedContractMethod<
    [seatNumber: BigNumberish],
    [boolean],
    "view"
  >;

  maxOccupancy: TypedContractMethod<[], [bigint], "view">;

  mintTicket: TypedContractMethod<
    [
      to: AddressLike,
      seatNumber: BigNumberish,
      tierName: string,
      metadataURI: string
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  seatOccupied: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, boolean] & {
        tokenId: bigint;
        seatNumber: bigint;
        tier: string;
        metadataURI: string;
        owner: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  tierNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tiers: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, boolean] & {
        name: string;
        price: bigint;
        quantity: bigint;
        minted: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  tokenIdToSeatNumber: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  tokenIdToTier: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userTickets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<
    [tierName: string, metadataURI: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "eventDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eventDescription"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eventOrganizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllTierNames"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAvailableSeats"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSeatNumber"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTicket"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [EventTicket.TicketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketTier"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTier"
  ): TypedContractMethod<
    [tierName: string],
    [EventTicket.TierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTickets"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSeatOccupied"
  ): TypedContractMethod<[seatNumber: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxOccupancy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintTicket"
  ): TypedContractMethod<
    [
      to: AddressLike,
      seatNumber: BigNumberish,
      tierName: string,
      metadataURI: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seatOccupied"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, string, boolean] & {
        tokenId: bigint;
        seatNumber: bigint;
        tier: string;
        metadataURI: string;
        owner: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tierNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tiers"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, boolean] & {
        name: string;
        price: bigint;
        quantity: bigint;
        minted: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenIdToSeatNumber"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenIdToTier"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTickets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TicketMinted"
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "TierAdded"
  ): TypedContractEvent<
    TierAddedEvent.InputTuple,
    TierAddedEvent.OutputTuple,
    TierAddedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TicketMinted(uint256,address,uint256,string,string)": TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;

    "TicketPurchased(address,uint256,string,uint256,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;

    "TierAdded(string,uint256,uint256)": TypedContractEvent<
      TierAddedEvent.InputTuple,
      TierAddedEvent.OutputTuple,
      TierAddedEvent.OutputObject
    >;
    TierAdded: TypedContractEvent<
      TierAddedEvent.InputTuple,
      TierAddedEvent.OutputTuple,
      TierAddedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
